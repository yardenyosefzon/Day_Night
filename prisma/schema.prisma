// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Event {
  id             String   @id @default(cuid())
  eventName      String
  createdAt      DateTime @default(now())
  date           DateTime
  artist         String
  image          String
  cost           Int
  eventCreater   User     @relation(fields: [eventCreaterId], references: [id])
  eventCreaterId String
  ticket         Ticket[]

  @@index([eventCreaterId])
}

model Ticket {
  id            String  @id @default(cuid())
  event         Event   @relation(fields: [eventId], references: [id])
  eventId       String
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  email         String
  nationalId    String
  birthDay      String
  gender        String
  phoneNumber   String
  instaUserName String
  verified      Boolean @default(false)
  rejected      Boolean @default(false)
  usersTicket   Boolean @default(false)
  slug          String  @default(uuid())

  @@index([userId])
  @@index([eventId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime?
  rememberMe    Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[]
  events        Event[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
