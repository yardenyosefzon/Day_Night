// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Event {
  id                   String          @id @default(cuid())
  eventName            String          @unique
  slug                 String          @unique @default(uuid())
  date                 String
  artist               String
  image                String?
  address              String
  description          String          @db.LongText
  minAge               Int
  scannedTicketsNumber Int             @default(0)
  views Int             @default(0)
  eventCreator         User            @relation(fields: [eventCreatorId], references: [id])
  eventCreatorId       String
  boughtTicket         BoughtTicket[]
  schemaTicket         SchemaTicket[]
  eventScanner         Event_Scanner[]

  @@index([eventCreatorId])
}

model Event_Scanner {
  id      String @id @default(cuid())
  event   Event  @relation(fields: [eventName], references: [eventName])
  eventName String
  user    User   @relation(fields: [userEmail], references: [email])
  userEmail  String

  @@index([eventName])
  @@index([userEmail])
}

model BoughtTicket {
  id                String  @id @default(cuid())
  event             Event   @relation(fields: [eventId], references: [id])
  eventId           String
  user              User?   @relation(fields: [userId], references: [id])
  userId            String?
  ticketKind        String
  email             String
  nationalId        String
  partialNationalId String
  birthDay          String
  age               Int
  gender            String
  phoneNumber       String
  instaUserName     String
  fullName          String
  verified          Boolean @default(false)
  rejected          Boolean @default(false)
  usersTicket       Boolean @default(false)
  slug              String  @unique
  qrCode            String  @db.Text
  scanned           Boolean @default(false)

  @@index([userId])
  @@index([eventId])
}

model SchemaTicket {
  id              String  @id @default(cuid())
  slug            String  @unique @default(uuid())
  ticketName      String
  price           Int
  numberOfTickets Int
  notes           String?
  event           Event   @relation(fields: [eventId], references: [id])
  eventId         String

  @@index([eventId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  image         String?
  emailVerified DateTime?
  rememberMe    Boolean         @default(false)
  hideQrEx      Boolean         @default(false)
  accounts      Account[]
  sessions      Session[]
  tickets       BoughtTicket[]
  events        Event[]
  eventScanner  Event_Scanner[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
